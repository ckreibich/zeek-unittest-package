#! /usr/bin/env bash
#
# This script takes a package name as input and replaces the templated
# naming across the file tree with the actual package name.
#
scriptname=$(basename "$0")

do_broify=no
do_strip_plugin=no
do_verbose=no

instantiate_pkg() {

    declare -A translations=(
        ["template"]="${pkgname,,*}"
        ["Template"]="${pkgname}"
        ["TEMPLATE"]="${pkgname^^*}"
    )

    local src
    local dst
    local fname

    # If this isn't going to be a plugin, remove all the related
    # goodness.  Do this before the renaming, to simplify git
    # interactions.
    if [ $do_strip_plugin = yes ]; then
        echo "== Removing plugin components"
        sed -i '/build_command/d' zkg.meta
        sed -i 's/\/Corelight\/Template//' zkg.meta

        git rm src/*
        git rm configure configure.plugin CMakeLists.txt Makefile VERSION
        git rm scripts/__preload__.zeek scripts/types.zeek

        git mv -f scripts/Corelight/Template/__load__.zeek scripts/__load__.zeek
        git mv -f scripts/Corelight/Template/main.zeek scripts/main.zeek
        rm -rf scripts/Corelight

        sed -i 's/\/Corelight\/Template//g' testing/btest.cfg
        git rm testing/template/show-plugin.zeek
        git rm testing/Baseline/template.show-plugin/output
        rm -rf testing/Baseline/template.show-plugin
    fi

    if [ $do_broify = yes ]; then
        echo "== Bro-ifying content"

        declare -A bro_translations=(
            ["zeek"]="bro"
            ["Zeek"]="Bro"
            ["ZEEK"]="BRO"
            ["zkg.meta"]="bro-pkg.meta"
        )

        for src in "${!bro_translations[@]}"; do
            dst=${bro_translations[$src]}

            for fname in $(find . -name "*$src*" | grep -v '\.git\|\.pcap$|^\./configure$'); do
                local dstname=$(echo "$fname" | sed "s/$src/$dst/g")
                git mv -f "$fname" "$dstname"
            done

            for fname in $(grep -rl --exclude-dir .git $src | grep -v ^$scriptname$); do
                sed -i "s/$src/$dst/g" "$fname"
            done
        done
    fi

    echo "== Renaming files and contents"
    for src in "${!translations[@]}"; do
        dst=${translations[$src]}

        for fname in $(find . -name "*$src*" | grep -v '\.git\|\.pcap$'); do
            local dstname=$(echo "$fname" | sed "s/$src/$dst/g")
            git mv -f "$fname" "$dstname"
        done

        for fname in $(grep -rl --exclude-dir .git $src | grep -v ^$scriptname$); do
            sed -i "s/$src/$dst/g" "$fname"
        done
    done

    # Remove this script itself, no longer useful
    echo "== Cleaning up"
    git rm -f "$scriptname"

    # Commit the whole thing
    echo "== Committing changes"
    git add -u
    git commit -m "Instantiate Zeek package template to '$pkgname'"
}

show_help() {
    echo
    echo "Zeek package boostrapping utility"
    echo
    echo "Usage: $scriptname [options] <PackageName>"
    echo
    cat <<EOF
This script takes a mandatory provided package name as input and
renames any occurrence of template strings in file contents or file
names with an appropriately upper-/lower-/camel-cased version of the
provided name. This name should work as a Zeek module name: "FooBar"
is good, so is "Foobar", while "FOOBAR" and "foobar" aren't great.
EOF
    echo
    echo "Available options:"
    echo
    echo "    -b|--bro-compatible  Bro-ify naming, for older versions"
    echo "    -p|--strip-plugin    Remove plugin components"
    echo "    -v|--verbose         Show detailed output"
    echo "    -h|--help            Show this help output and exit"
    echo

    exit 0
}

# ---- Main program ----------------------------------------------------

while [ "$1" != "" ]; do
    case "$1" in
        "-h"|"--help")
            show_help
            # Not reached
            ;;
        "-b"|"--bro-compatible")
            do_broify=yes
            shift
            ;;
        "-p"|"--strip-plugin")
            do_strip_plugin=yes
            shift
            ;;
        "-v"|"--verbose")
            do_verbose=yes
            shift
            ;;
        *)
            break
            ;;
    esac
done

pkgname="$1"

if [ -z "$pkgname" ]; then
    echo "Need a Zeek package name as the only argument."
    exit 1
fi

if [[ $pkgname =~ " " ]]; then
    echo "The package name cannot have spaces."
    exit 1
fi


[ $do_verbose = yes ] && dest=/dev/stdout || dest=/dev/null

instantiate_pkg 2>&1 >$dest
